version: 2.1

# orbs:
#    heroku: circleci/heroku@0.0.10

jobs:
  build:
    docker:
      - image: circleci/python:3.10
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Environment Creation
          command: python3 -m venv venv
      - run:
          name: Build Docker image
          command: docker build --tag dockervoyager/oc-lettings:$CIRCLE_SHA1 .
      - run:
          name: Archive Docker image
          command: docker save --output image.tar dockervoyager/oc-lettings:$CIRCLE_SHA1
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
  test:
    docker:
      - image: circleci/python:3.10
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Test Preparation
          command: |
            . venv/bin/activate
            pip install -r requirements.txt
            sudo apt-get update
            sudo apt-get install chromium -y
            sudo wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
            sudo dpkg -i google-chrome-stable_current_amd64.deb
            sudo apt-get -fy install
            mkdir test-results
      - run:
          name: Test Launch
          command: |
            . venv/bin/activate
            pip install -r requirements.txt
            pytest --junitxml=test-results/junit.xml
            python manage.py test
      - store_artifacts:
          path: test-reports/
          destination: python_app
      - store_test_results:
          path: test-results

  coverage:
    docker:
      - image: circleci/python:3.10
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name : Coverage 
          command: |
            python -m pip install -r requirements.txt
            coverage run -m pytest
            coverage report
            coverage html
      - store_artifacts:
          path: htmlcov
    
  push:
    docker:
      - image: circleci/python:3.10
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load Docker image
          command: docker load --input /tmp/workspace/image.tar
      - run:
          name: Publish Docker image
          command: |
            echo "${DOCKERHUB_PASSWORD}" | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
            docker push dockervoyager/oc-lettings:$CIRCLE_SHA1

  deploy:
    docker:
      - image: oc-lettings
        auth:
          username: dockervoyager
          password: $DOCKERHUB_PASSWORD 
    steps:
      - checkout
      - run:
          name: Deploy Main to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git main

workflows:
  version: 2.1
  build_test_and_coverage:
    jobs:
      - build
      - test
      - coverage
      - push:
          requires:
            - build
            - test
            - coverage
          filters:
            branches:
              only:
                - main
      - deploy:
          requires:
            - build
            - test
            - coverage
            - push
          filters:
            branches:
              only:
                - main
      # - heroku/deploy-via-git:
      #     requires:
      #       - build
      #       - test
      #       - coverage
      #       - push
      #     filters:
      #       branches:
      #         only: main